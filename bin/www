#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('qtransferadmin:server');
var http = require('http');
var mysql = require('mysql');
var WebSocket = require('ws');
var AsessionGarbageCollector = require('../tools/AsessionGarbageCollector');

global.sql_connection = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "",
  database:"qtransfer"
});

global.sql_connection.connect(function(err) {
  if (err) throw err;

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);

  const ws = new WebSocket('ws://localhost:3001');

  ws.on('open', function open() {
    ws.send('AGC Connected');
  });
  

  var AGC = new AsessionGarbageCollector(2,3,global.sql_connection);
  AGC.onsessiondestroy = (asession_id) => {
    console.log("Emitting agc event");
    ws.send(JSON.stringify({type:'agc',value:asession_id}));
  }
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
})
